# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mastodon_blender_view_pb2 as mastodon__blender__view__pb2


class ViewServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addMovingSpot = channel.unary_unary(
                '/mastodon_blender_view.ViewService/addMovingSpot',
                request_serializer=mastodon__blender__view__pb2.AddMovingSpotRequest.SerializeToString,
                response_deserializer=mastodon__blender__view__pb2.Empty.FromString,
                )
        self.setSpotColors = channel.unary_unary(
                '/mastodon_blender_view.ViewService/setSpotColors',
                request_serializer=mastodon__blender__view__pb2.SetSpotColorsRequest.SerializeToString,
                response_deserializer=mastodon__blender__view__pb2.Empty.FromString,
                )
        self.setTimePoint = channel.unary_unary(
                '/mastodon_blender_view.ViewService/setTimePoint',
                request_serializer=mastodon__blender__view__pb2.SetTimePointRequest.SerializeToString,
                response_deserializer=mastodon__blender__view__pb2.Empty.FromString,
                )
        self.subscribeToActiveSpotChange = channel.unary_stream(
                '/mastodon_blender_view.ViewService/subscribeToActiveSpotChange',
                request_serializer=mastodon__blender__view__pb2.Empty.SerializeToString,
                response_deserializer=mastodon__blender__view__pb2.ActiveSpotResponse.FromString,
                )
        self.setActiveSpot = channel.unary_unary(
                '/mastodon_blender_view.ViewService/setActiveSpot',
                request_serializer=mastodon__blender__view__pb2.SetActiveSpotRequest.SerializeToString,
                response_deserializer=mastodon__blender__view__pb2.Empty.FromString,
                )


class ViewServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addMovingSpot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSpotColors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setTimePoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeToActiveSpotChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setActiveSpot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ViewServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addMovingSpot': grpc.unary_unary_rpc_method_handler(
                    servicer.addMovingSpot,
                    request_deserializer=mastodon__blender__view__pb2.AddMovingSpotRequest.FromString,
                    response_serializer=mastodon__blender__view__pb2.Empty.SerializeToString,
            ),
            'setSpotColors': grpc.unary_unary_rpc_method_handler(
                    servicer.setSpotColors,
                    request_deserializer=mastodon__blender__view__pb2.SetSpotColorsRequest.FromString,
                    response_serializer=mastodon__blender__view__pb2.Empty.SerializeToString,
            ),
            'setTimePoint': grpc.unary_unary_rpc_method_handler(
                    servicer.setTimePoint,
                    request_deserializer=mastodon__blender__view__pb2.SetTimePointRequest.FromString,
                    response_serializer=mastodon__blender__view__pb2.Empty.SerializeToString,
            ),
            'subscribeToActiveSpotChange': grpc.unary_stream_rpc_method_handler(
                    servicer.subscribeToActiveSpotChange,
                    request_deserializer=mastodon__blender__view__pb2.Empty.FromString,
                    response_serializer=mastodon__blender__view__pb2.ActiveSpotResponse.SerializeToString,
            ),
            'setActiveSpot': grpc.unary_unary_rpc_method_handler(
                    servicer.setActiveSpot,
                    request_deserializer=mastodon__blender__view__pb2.SetActiveSpotRequest.FromString,
                    response_serializer=mastodon__blender__view__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mastodon_blender_view.ViewService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ViewService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addMovingSpot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mastodon_blender_view.ViewService/addMovingSpot',
            mastodon__blender__view__pb2.AddMovingSpotRequest.SerializeToString,
            mastodon__blender__view__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSpotColors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mastodon_blender_view.ViewService/setSpotColors',
            mastodon__blender__view__pb2.SetSpotColorsRequest.SerializeToString,
            mastodon__blender__view__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setTimePoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mastodon_blender_view.ViewService/setTimePoint',
            mastodon__blender__view__pb2.SetTimePointRequest.SerializeToString,
            mastodon__blender__view__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeToActiveSpotChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mastodon_blender_view.ViewService/subscribeToActiveSpotChange',
            mastodon__blender__view__pb2.Empty.SerializeToString,
            mastodon__blender__view__pb2.ActiveSpotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setActiveSpot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mastodon_blender_view.ViewService/setActiveSpot',
            mastodon__blender__view__pb2.SetActiveSpotRequest.SerializeToString,
            mastodon__blender__view__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
